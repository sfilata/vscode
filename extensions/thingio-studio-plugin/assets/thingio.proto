syntax = "proto3";
//import "google/protobuf/any.proto";
package thingio;

// ThingIO core相关的接口.

service ThingIOCore {
  // 获取最近使用的platform
  rpc ListRecentUsedPlatforms (EmptyRequest) returns (ListPlatformsReply) {}
  // 获取所有的platform列表和其下面所有支持的板子
  rpc ListPlatforms (ListPlatformsRequest) returns (ListPlatformsReply) {}
  // 获取某个platform下面的所有的version
  rpc ListPlatformVersions(ListPlatformVersionsRequest) returns (ListPlatformVersionsReply) {}
  // 新建项目
  rpc NewProject (NewProjectRequest) returns (NewProjectReply) {}
  // 新建项目
  rpc NewProjectProperties (NewProjectPropertiesRequest) returns (NewProjectPropertiesReply) {}
  // 获取某个板子的详情
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesReply) {}
  // 获取模板的markdown conent
  rpc GetTemplateMd(GetTemplateMdRequest) returns (stream GetTemplateMdReply) {}
  // 获取项目配置接口
  rpc GetProjectConfig(EmptyProjectRequest)  returns (GetProjectConfigReply) {}
  // 更改当前的活动配置
  rpc SetActiveConfig(SetActiveConfigRequest) returns (EmptyReply) {}
  // 项目配置接口
  rpc CreateProjectConfig(CreateProjectConfigRequest) returns (EmptyReply) {}
  // 保存项目配置
  rpc SaveProjectConfig(SaveProjectConfigRequest) returns (EmptyReply) {}
  // 项目属性的更改
  rpc SyncProjectSettings(stream SyncProjectSettingsRequest) returns (stream SyncProjectSettingsReply) {}
  // 平台工具链（是指全局的那个)和具体的某个工具链
  rpc GetPlatformTools(GetPlatformToolsRequest) returns (GetPlatformToolsResponse) {}
  // SDK 管理器左侧的菜单
  rpc GetPlatformsForSDKManager(EmptyRequest) returns (GetPlatformsForSDKManagerResponse) {}

}

// 新建项目属性的可选值获取
message NewProjectPropertiesRequest {
  string platformId = 1; //新建项目属性的平台的版本号
  string platformVersion = 2; //新建项目属性的平台的版本号
  string boardId = 3; //选择的开发板的ID
  string templateId = 4; //选择的模板的ID
}

// 新建项目属性的可选值获取
message NewProjectPropertiesReply {
  int32 code = 1; // 1, 成功， 2, 失败
  string message = 2; //创建成功或者失败的描述
  Select cpuFamily = 3;
  Select cpuName = 4;
  Select byteOrder = 5;
  Select toolChain = 6;
  Select buildTool = 7; // 构建工具
  Select uploadTool = 10; // 烧录/调试工具
  Select runtimeLibrary = 8;
  Select downloadModes = 9;
  string sessionId = 11;
}

message Select {
  string key = 1;
  repeated Option choices = 2;
  string default = 3;
  string type = 4;//这个地方用不上， 请忽略
  string current = 5; //这个地方用不上， 请忽略
}

message Option {
  string id = 1;
  string name = 2;
  bool disabled = 3;
  string flags = 4; //此处无用
}


// The request message containing the user's name.
message NewProjectRequest {
  string name = 1; // 项目名称
  string path = 2; // 位置
  string existWorkspacePath = 15; // 如果在已有的工作区下面来创建， 传递这个参数，后续的3， 4参数无效
  string workspaceName = 3; //工作区名称, 为空的时候， 就是默认的
  int32 workspaceAndPathSameDir = 4; // 工作区和项目在同一个目录下, 1: true, 0: false, 默认false
  string sessionId = 5; // NewProjectProperties返回的session id
  string platform = 6; // 开发平台, id, 注意， 这个地方的Id 只是用于保存到最近创建的平台里面 不会有其他的作用， 不能在这儿更改平台
  //  string board = 6;
  //  string template = 7; //模板
  string cpu_series = 8; // cpu家族, id
  string cpu = 9; // cpu名称, id
  string byte_order = 10; //默认字节序列
  string build_tool = 11; //构建工具
  string build_toolchain = 16; //工具链
  string upload_tool = 12; //烧录调试工具
  string build_runtime_library = 13; //c运行库
  string build_download_modes = 14; //下载运行模式
}

// The response message containing the greetings
message NewProjectReply {
  int32 code = 1; // 1, 成功， 2, 失败
  string message = 2; //创建成功或者失败的描述
  string detail = 3; //细节
}

message ListPlatformsRequest {
  //  string name = 1; // 搜索关键字
  bool installOnly = 2; // 1: true, 0: false 仅仅显示已经安装工具集的平台
}

message  ListPlatformsReply {
  int32 code = 1; // 1, 成功， 2, 失败
  string message = 2; //执行任务的结果, 文字描述
  repeated Platform platforms = 3;
}

message ListPlatformVersionsReply {
  message Version {
    string id = 1;
    bool installed = 2;
  }
  int32 code = 1; // 1, 成功， 2, 失败
  string message = 2; // 执行任务的结果, 文字描述
  repeated Version versions = 3;
}

message EmptyRequest {
}

message EmptyProjectRequest {
  string projectPath = 1; //riskV project path
}

message EmptyReply {
  int32 code = 1; // 1, 成功， 2, 失败
  string message = 2; //执行任务的结果, 文字描述
}

message Platform {
  string id = 1;
  string name = 2;
  string version = 3;
  bool latest = 4; // 0: false, 1: true
  repeated Board boards = 5; // 依然返回的是这个结构， 只是里面的template是空的， 需要进一步查询展开
  //  int32 installed = 5; // 0： 尚未安装工具集, 2: 已经安装工具集
}

message Board {
  string id = 1;
  string name = 2;
  string type = 3;
}

message TemplateGroup {
  //  string id = 1; // 暂时不用
  string name = 2; //模板分组
  repeated Template templates = 3; // Template列表
}

message Template {
  string id = 1;
  string name = 2;
  string desc = 3; // 描述
  //  repeated string mdContent = 4; // md的文档
}

message ListPlatformVersionsRequest {
  string id = 1; //platform的id
  string boardId = 2;
}

message ListTemplatesRequest {
  string platformId = 1; // platform id
  string platformVersion = 2; // platform version
  string boardId = 3; // board id
}

message ListTemplatesReply {
  int32 code = 1; // 1, 成功， 2, 失败
  string message = 2; //执行任务的结果, 文字描述
  repeated TemplateGroup templateGroup = 3; //按照分类组织的模板
}

message  GetTemplateMdRequest{
  string platformId = 1;
  string templateId = 2;
}

message GetTemplateMdReply {
  int32 code = 1; // 1, 成功， 2, 失败, 3， 没安装
  string message = 2; //执行任务的结果, 文字描述
  string path = 3; //文档的路径
  string md = 4; // markdown的一行
}

message  ProjectConfig {
  string name = 1; //name应该是唯一的, 不能是env和thingio
  string brief = 2;
  bool active = 3; // 是否是当前的活动配置
}

message GetProjectConfigReply {
  int32 code = 1; // 1, 成功， 2, 失败, 3， 没安装
  string message = 2; //执行任务的结果, 文字描述
  repeated ProjectConfig configs = 3;
}

message CreateProjectConfigRequest {
  string projectPath = 1; // 目标项目的根目录
  ProjectConfig config = 2; //新创建的名称不能为"thingio", "env", 也不能和以后的重复
  int32 createType = 3; // 1: 从已有配置、2： 从默认配置； 3： 从项目导入； 4： 从预制配置 TODO 目前支持的， 只有1、2； 3、4会和2暂时一致
  string copyFrom = 4; // createType为1的时候， 传入目标的项目配置的名称
}

message SaveProjectConfigRequest {
  string projectPath = 1; //目标项目的根目录
  string oldConfigName = 2; //原来的config的名称， 要替换的名称
  ProjectConfig config = 3; //新创建的名称不能为"thingio", "env", 也不能和以后的重复
}

message  SyncProjectSettingsRequest {
  string projectPath = 1; //目标项目的根目录， 首次的时候传入有效
  string configName = 2; //配置的id， 首次的时候传入有效
  /**
    "normal":  # 常规
    "output":  # 输出
    "build":  # 构建
    "toolchain.targetCpu":  # 目标处理器
    "toolchain.optimize":  # 优化
    "toolchain.warning":  # 警告
    "toolchain.debug":  # 调试
    "toolchain.directory":  # 目录
    "toolchain.preprocessor":  # 预处理器
    "toolchain.compiler":  # c c++编译器
    "toolchain.assembler":  # 汇编器
    "toolchain.linker":  # 链接器
    "toolchain.archiver":  # 归档器
    "toolchain.advance":  # 高级
    "toolchain.binutils":  # 实用工具
    "toolchain.uploader":  # 烧录和调试-烧录器
    "toolchain.debugger":  # 烧录和调试-调试器
    "others":  # 其他
   */
  //  string groupId = 3; //分组的名称， 首次的时候传入有效
  string value = 4; // 当前的值的变化， 首次传入的时候， 为空即可， 先定为， 后面传入改变的值， 如果要清空，暂定输入为一个存空格的字符串
  int32 action = 5; // 0 就会默认的修改， 1 表示获取，会返回全部的表单内容和值
}

message SyncProjectSettingsReply {
  int32 code = 1; //返回的状态
  string message = 2; //code的描述
  string value = 3; // 双向同步的数据， 如果需要更改值， 或者首次传值， 会传入这个
  string form = 4; // 表单的相关数据， 如果表单发生了变化， 就返回表单变化后的结构
  string errors = 5; //验证表单出错的值，包含了曾经所有的出错的值， 每次都会返回相应的值
}

message GetPlatformToolsRequest {
  string platformId = 1; //平台的名称， 为==""的时候， 表示获取平台支持包(通用的)
  string version = 2; //platform的版本号
}

message GetPlatformToolsResponse {
  message SDKGroup {
    string category = 1; // 组的名称
    repeated SDKComponent packages = 2; // 组下面的组件的列表
  }
  message SDKComponent {
    string id = 1; // 唯一ID
    string default_version = 2;
    string install_version = 3; // 已经安装的版本
    bool  installed = 4; //已安装
    bool necessity = 5; // 必选
  }
  int32 code = 1; //返回的状态
  string message = 2; //code的描述
  repeated SDKGroup groups = 3; // 按组分类的列表
}

message GetPlatformsForSDKManagerResponse {
  int32 code = 1; //返回的状态
  string message = 2; //code的描述
  message PlatformGroup {
    string name = 1;
    repeated PlatformAndVersion platforms = 2;
  }
  message PlatformAndVersion {
    string id = 1; // 平台的ID
    string version = 2; //版本号
    bool install = 3; //是否已经安装
  }
  repeated PlatformGroup groups = 3; //平台的列表
}

message SetActiveConfigRequest {
  string projectPath = 1;
  string config = 2; //需要设置的活动配置的名称
}

//message JsonBean {
//  string key = 1;
//  google.protobuf.Any value = 2;
//}
